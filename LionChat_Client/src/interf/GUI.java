package interf;

import utilz.Filez;
import java.util.ArrayList;
import javax.swing.text.DefaultCaret;
import parsing.Language;
import net.Connection;
import utilz.Utils;

/**
 * The main Graphical User Interface of the LionChat Client.
 *
 * @author fazo
 */
public class GUI extends javax.swing.JFrame {

    private String ip = "localhost", languageID = "en";
    private int port = 7777;
    private static Language language = null;
    private static GUI gui;
    private static SettingsUI settingsUI;
    private static SaveHistoryUI saveHistoryUI;

    /**
     * Initializes components of a new GUI.
     */
    public GUI() {
        initComponents(); //intialization of graphical components
    }

    /**
     * Starts up the GUI and initializes all the stuff. Very important, must be
     * run once when the program starts
     */
    private void start() {
        setTitle("LionChat Client");
        System.out.println("GUI Started");
        //set text area autoscrolling and line wrapping
        textArea.setLineWrap(true);
        autoScroll();
        gui = this; //configure static pointer to this instance
        //Give focus to the text input field
        textField.requestFocusInWindow();
        loadLanguage("en"); //load default english language into the program
        readSettings(); //read settings from file
        gui.setVisible(true); //make the window visible
        setLocationRelativeTo(null); //put window at the center of the screen
        //Prepare other windows
        settingsUI = new SettingsUI();
        saveHistoryUI = new SaveHistoryUI();
        Connection.connect(ip, port); //connect to the server :)
    }

    private void autoScroll() {
        ((DefaultCaret) textArea.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    public static GUI get() { //ritorno l'istanza in esecuzione.
        return gui;
    }

    public void append(String text) {
        //scrivo un messaggio alla gui e in console senza andare a capo
        textArea.append(text);
        autoScroll();
        System.out.print(text);
    }

    public void clear() { //svuoto la textArea
        textArea.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        textField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveHistory = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        settingsMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        textField.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldActionPerformed(evt);
            }
        });
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldKeyPressed(evt);
            }
        });

        sendButton.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        sendButton.setText("send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        fileMenu.setText("File");

        saveHistory.setText("save_log");
        saveHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveHistoryActionPerformed(evt);
            }
        });
        fileMenu.add(saveHistory);

        exit.setText("exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        fileMenu.add(exit);

        jMenuBar1.add(fileMenu);

        editMenu.setText("edit");

        settingsMenu.setText("settings");
        settingsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuActionPerformed(evt);
            }
        });
        editMenu.add(settingsMenu);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // This is the "send button" function
        if (Connection.isConnected()) {
            if (textField.getText() != "" && Utils.isValid(textField.getText())) {
                // Valid text
                Connection.send(textField.getText().trim());
            } else {
                // Text is not valid
                //append(language.getSentence("invalidString").print());
            }
        } else {
            // Send has been pressed while not connected
            append(language.getSentence("tryReconnect").print());
            Connection.connect(ip, port); //try to reconnect
        }
        textField.setText(""); //Empty the field and request focus on it
        textField.requestFocusInWindow();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        //Inutile
    }//GEN-LAST:event_jPanel1KeyPressed

    private void textFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyPressed
        // Viene chiamato quando viene premuto un tasto e il focus è sul textfield
        if (evt.getKeyCode() == evt.VK_ENTER) { //se il tasto è invio
            sendButtonActionPerformed(null); //simula la pressione di send
        }
    }//GEN-LAST:event_textFieldKeyPressed

    private void settingsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuActionPerformed
        settingsUI.setVisible(true);
        settingsUI.updateFields();
        settingsUI.applyLanguage();
    }//GEN-LAST:event_settingsMenuActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void saveHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveHistoryActionPerformed
        saveHistoryUI.setVisible(true);
        saveHistoryUI.setLabelText(language.getSentence("youllFindFile").print());
        saveHistoryUI.applyLanguage();
    }//GEN-LAST:event_saveHistoryActionPerformed

    private void textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldActionPerformed

    /**
     * Entry point of the program. Istantiates the GUI and starts it up.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            System.out.println("[FATAL] Can't load look and feel");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gui = new GUI();
                gui.start(); //Start the GUI up!
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem saveHistory;
    private javax.swing.JButton sendButton;
    private javax.swing.JMenuItem settingsMenu;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables

    /**
     * Read settings from the file, autoconfiguring it if it's missing.
     */
    public void readSettings() {
        ArrayList<String> cnt = null;
        //read the file and read the content
        append(language.getSentence("tryReadSettings").print());
        for (int i = 0; i < 2; i++) {
            append(language.getSentence("tryNumber").print("" + (i + 1)));
            cnt = Utils.toList(Filez.getFileContent("settings.txt"), " ");
            if (cnt == null) { // If the list is null, it means the read failed
                append(language.getSentence("settingsNotFound").print());
                Filez.writeFile("settings.txt", ip + " " + port + " " + languageID);
                continue; //Nothing to do anymore
            }
            append(language.getSentence("readSuccessfull").print());
            break;
        }
        if (cnt == null) {
            append(language.getSentence("settingsReadFailed").print());
        } else if (cnt.size() != 3) { //There must be 3 elements for the file to be valid
            append(language.getSentence("settingsWrongParamNumber").print(cnt.size() + ""));
            // Rewrite the settings
            Filez.writeFile("settings.txt", ip + " " + port + " " + languageID);
            return; //nothing to do anymore.
        }
        // Finally assign the parameters
        ip = cnt.get(0);
        try {
            port = Integer.parseInt(cnt.get(1));
        } catch (Exception ex) { // Port number is not valid!
            port = 7777;
        }
        String oldLang = languageID;
        languageID = cnt.get(2);
        if (oldLang != languageID) {
            loadLanguage(languageID);
        }
    }

    public String getIP() {
        return ip;
    }

    public int getPort() {
        return port;
    }

    /**
     * Returns the text inside the output area
     *
     * @return text as string
     */
    public String getHistory() {
        return textArea.getText();
    }

    /**
     * Loads up a language file and applies it automatically
     *
     * @param lang
     * @return if the loading of given language fails, the method outputs an
     * error message and loads english and returns true. If loading english also
     * fails, it returns false
     */
    private boolean loadLanguage(String lang) {
        append("Loading language \""+lang+"\"\n");
        language = new Language(lang);
        if (!language.isLoaded()) {
            if (lang.equals("en")) {
                return false;
            }
            append("[!] Could not load language \"" + lang + "\", trying english instead\n");
            // If the language given can't be loaded, just load english instead
            return loadLanguage("en");
        }
        System.out.println(language.getLangInfo(true));
        //Apply the language to this GUI
        fileMenu.setText(language.getSentence("fileMenu").print());
        editMenu.setText(language.getSentence("editMenu").print());
        settingsMenu.setText(language.getSentence("settingsTitle").print());
        exit.setText(language.getSentence("exit").print());
        saveHistory.setText(language.getSentence("saveHistoryTitle").print());
        sendButton.setText(language.getSentence("send").print());
        /*if (settingsUI != null) {
            settingsUI.applyLanguage();
        }
        if (saveHistoryUI != null) {
            saveHistoryUI.applyLanguage();
        }*/
        return true;
    }

    /**
     * Return the language the program is speaking in
     *
     * @return the language of the program.
     */
    public static Language getLanguage() {
        return language;
    }
}
